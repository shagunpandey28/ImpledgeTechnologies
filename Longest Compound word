import java.util.ArrayList;
import java.util.Comparator;
import java.util.TreeMap;

public class LongestCompoundWord2 {
    public static void main(String[] args) {
        String words[] = { "cat", "cats", "catsdogcats", "catxdogcatsrat", "dog", "dogcatsdog", "hippopotamuses",
                "rat", "ratcat", "ratcatdog", "ratcatdogcat" };
        // ratcatdogcat
        System.out.println("Longest Compound word : " + longestCompundWord(words));
 
    }
 
    public  static String longestCompundWord(String[] words) {
        ArrayList<String> list = new ArrayList<String>();
        TreeMap<String, Integer> wordTree = new TreeMap<String, Integer>(new Comparator<String>() {
            @Override
            public int compare(String word1, String word2) {
                return word1.length() - word2.length();
            }
        });
 
        for (int i = 0; i < words.length; i++) {
            wordTree.put(words[i], i);
            list.add(words[i]);
        }
 
        System.out.println(wordTree);
        return findLongestCompoundWord(wordTree, list);
 
    }
 
    private static boolean isCompoundWord(String word, ArrayList<String> string) {
        if (string.contains(word))
            return true;
        for (int i = 1; i < word.length(); i++) {
            String prefix = word.substring(0, i);
            if (isCompoundWord(prefix, string)) {
                String remainder = word.substring(i, word.length());
                if (remainder.length() == 0)
                    return true;
                return isCompoundWord(remainder, string);
            }
        }
        return false;
    }
 
    public static String findLongestCompoundWord(TreeMap<String, Integer> wordTree, ArrayList<String> dictionary) {
        while (wordTree.size() > 0) {
            String word = wordTree.lastKey();
            wordTree.remove(word);
            dictionary.remove(word);
            if (isCompoundWord(word, dictionary))
                return word;
        }
        return "";
    }
}

